{"version":3,"sources":["tackleComponents/TackleCounter.js","tackleComponents/StatTackleDisplayer.js","tackleComponents/TackleComponent.js","generalComponents/timerComponents/Components/DisplayComponent.js","generalComponents/timerComponents/Components/BtnComponent.js","generalComponents/timerComponents/Timer.js","possessionComponents/PossessionComponent.js","App.js","serviceWorker.js","index.js"],"names":["TackleCounter","tackleNb","setTackleNb","color","className","onClick","StatTackleDisplayer","num1","num2","adder","percentage","isNaN","toFixed","rate","TackleComponent","title","useState","missedTackleNb","setMissedTackleNb","DisplayComponent","props","time","hour","minute","seconde","milliseconde","BtnComponent","status","start","stop","reset","resume","Timer","setTime","interv","setInterv","setStatus","run","setInterval","updatedMs","updatedS","updatedM","updatedH","clearInterval","PossessionComponent","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ffa316fb.chunk.js","sourcesContent":["import React from 'react';\n\nconst TackleCounter = ({tackleNb, setTackleNb, color}) => {\n\n    const handleChange = () => {\n      setTackleNb(tackleNb + 1);\n    }\n\n    return(\n        <div className=\"mt-30\">\n            <div className={\"tackle counter-display \" + color} onClick={handleChange}>\n                <p>{tackleNb}</p>\n            </div>\n            {color === \"green\" ? \"Plaquage réussi !\" : \"Plaquage Manqué !\"}  \n        </div>\n    )\n}\n\nexport default TackleCounter;","import React from 'react';\n\nconst StatTackleDisplayer = ({num1, num2}) => {\n\n      const adder = (num1, num2) => num1 + num2;\n\n      const rate = (num1, num2) => {\n            const percentage = (num1 / (num1 + num2)*100);\n            return isNaN(percentage) ? 0 : percentage.toFixed(1) + \"%\"\n      }\n\n      return(\n            <div className=\"mt-50\">\n                  <div className=\"stat-display flex-column-center-center\">\n                        <p>\n                              {adder(num1, num2)} <br />\n                              Total Plaquages !\n                        </p>\n                  </div>\n                  \n                  <div className=\"stat-display flex-column-center-center\">\n                        <p>\n                              {rate(num1, num2)} <br />\n                              Taux de plaquages réussis !\n                        </p>\n                  </div>\n                  \n            </div>\n      )\n}\n\nexport default StatTackleDisplayer;","import React, { useState } from 'react';\nimport TackleCounter from './TackleCounter';\nimport StatTackleDisplayer from './StatTackleDisplayer';\nimport '../App.css';\n\nconst TackleComponent = ({ title }) => {\n      \n      const [tackleNb, setTackleNb] = useState(0);\n      const [missedTackleNb, setMissedTackleNb] = useState(0);\n\n      return (\n      <div className=\"main-component mt-30 pt-pb-30 pl-pr-10\">\n            <h2>{title}</h2>\n            <div>\n                  <TackleCounter tackleNb={tackleNb} setTackleNb={setTackleNb} color=\"green\" />\n                  <TackleCounter tackleNb={missedTackleNb} setTackleNb={setMissedTackleNb}  color=\"red\" />\n            </div>\n            <StatTackleDisplayer num1={tackleNb} num2={missedTackleNb} />\n      </div>\n      )\n}\n\nexport default TackleComponent;\n","import React from 'react';\r\n\r\nfunction DisplayComponent(props) {\r\n      const hour = () => {\r\n            if(props.time.hour === 0){\r\n                  return '';\r\n            } else {\r\n                  return (\r\n                        <span>\r\n                              { props.time.hour >= 10 ? \r\n                                    props.time.hour \r\n                                    : \"0\"+ props.time.hour\r\n                              }\r\n                        </span>\r\n                  )\r\n            }\r\n      }\r\n\r\n      return (\r\n            <div>\r\n                  {hour()}\r\n                  <span>\r\n                        { props.time.minute >= 10 ? \r\n                              props.time.minute \r\n                              : \"0\"+ props.time.minute\r\n                        }\r\n                  </span>&nbsp;\r\n                  <span>\r\n                        { props.time.seconde >= 10 ? \r\n                              props.time.seconde \r\n                              : \"0\"+ props.time.seconde\r\n                        }\r\n                  </span>&nbsp;\r\n                  <span>\r\n                        { props.time.milliseconde >= 10 ? \r\n                              props.time.milliseconde \r\n                              : \"0\"+ props.time.milliseconde\r\n                        }\r\n                  </span>\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default DisplayComponent;","import React from 'react';\r\n\r\nfunction BtnComponent(props) {\r\n      return (\r\n            <div>\r\n                  {(props.status === 0)? \r\n                        <button className=\"stopwatch-btn stopwatch-btn-gre\" onClick={props.start}>Attaque</button> \r\n                        : \"\"\r\n                  }\r\n\r\n                  {(props.status === 1)? \r\n                        <div>\r\n                              <button className=\"stopwatch-btn stopwatch-btn-red\" onClick={props.stop}>Défense</button>\r\n                              <button className=\"stopwatch-btn stopwatch-btn-yel\" onClick={props.reset}>Reset</button>\r\n                        </div> \r\n                        : \"\"\r\n                  }\r\n\r\n                  {(props.status === 2)? \r\n                        <div>\r\n                              <button className=\"stopwatch-btn stopwatch-btn-gre\" onClick={props.resume}>Attaque</button>\r\n                              <button className=\"stopwatch-btn stopwatch-btn-yel\" onClick={props.reset}>Reset</button>\r\n                        </div> \r\n                        : \"\"\r\n                  }\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default BtnComponent;","import React, {useState} from 'react';\nimport DisplayComponent from './Components/DisplayComponent';\nimport BtnComponent from './Components/BtnComponent';\nimport './Timer.css';\n\nfunction Timer() {\n      const [time, setTime] = useState({ milliseconde : 0, seconde : 0, minute : 0, hour : 0 });\n      const [interv, setInterv] = useState();\n      const [status, setStatus] = useState(0);\n      // Not started = 0\n      // started = 1\n      // stopped = 2\n\n      const start = () => {\n            run();\n            setStatus(1);\n            setInterv(setInterval(run, 10));\n      };\n\n      let updatedMs = time.milliseconde, \n      updatedS = time.seconde, \n      updatedM = time.minute, \n      updatedH = time.hour;\n\n      const run = () => {\n            if ( updatedM === 60 ) {\n                  updatedH++;\n                  updatedM = 0;\n            }\n\n            if ( updatedS === 60 ) {\n                  updatedM++;\n                  updatedS = 0;\n            }\n\n            if ( updatedMs === 100 ) {\n                  updatedS++;\n                  updatedMs = 0;\n            }\n\n            updatedMs++;\n\n            return setTime({ \n                  milliseconde : updatedMs, \n                  seconde:updatedS, \n                  minute:updatedM, \n                  hour:updatedH\n            });\n      };\n\n      const stop = () => {\n            clearInterval(interv);\n            setStatus(2);\n      };\n\n      const reset = () => {\n            clearInterval(interv);\n            setStatus(0);\n            setTime({ \n                  milliseconde:0, \n                  seconde:0, \n                  minute:0, \n                  hour:0\n            })\n      };\n\n      const resume = () => start();\n\n\n      return (\n            <div className=\"stopwatch\">\n                  <DisplayComponent time={time}/>\n                  <BtnComponent status={status} resume={resume} reset={reset} stop={stop} start={start}/>\n            </div>\n      )   \n}\n\nexport default Timer;\n","import React from 'react';\nimport Timer from '../generalComponents/timerComponents/Timer';\nimport '../App.css';\n\nconst PossessionComponent = ({ title }) => {\n\n      return (\n      <div className=\"main-component mt-30 pt-pb-30 pl-pr-10\">\n            <h2>{title}</h2>\n            <div className=\"mt-30\">\n                  <Timer />\n            </div>\n      </div>\n      );\n}\n\nexport default PossessionComponent;\n","import React from 'react';\nimport TackleComponent from './tackleComponents/TackleComponent';\nimport PossessionComponent from './possessionComponents/PossessionComponent';\n\nconst App = () => {\n      return (\n            <div className=\"App pt-pb-30\">\n                  <h1>STATISGBY</h1>\n                  <div className=\"flex-row-space-around-start\">\n                        <TackleComponent title=\"Plaquages\" />\n                        <PossessionComponent title=\"Possession\" />\n                        {/* <TackleComponent title=\"Occupation\" /> */}\n                  </div>  \n            </div>\n      )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}